{"version":3,"file":"static/js/353.dda2a9c2.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/base/Section.styled.js","helpers/Messages/NotifyMessages.jsx","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","helpers/Loader/NotiflixLoading.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/APIservice.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: stretch;\n  gap: 20px;\n\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 768px) {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-auto-rows: auto;\n    grid-gap: 30px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));\n    grid-auto-rows: auto;\n    grid-gap: 32px;\n  }\n`;\n\nconst Item = styled.li`\n  padding: 10px;\n  width: 100%;\n  height: auto;\n  background-color: #fff;\n  border: 3px solid rgba(132, 132, 132, 0.5);\n  border-radius: 4px;\n  box-shadow: 0px 7px 10px -2px rgba(132, 132, 132, 0.5);\n`;\n\nconst Image = styled.img`\n  display: block;\n  width: 100%;\n  height: auto;\n  background-color: darkgray;\n\n  @media screen and (min-width: 320px) {\n    width: 240px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 200px;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  text-decoration: none;\n  color: inherit;\n\n  :hover,\n  :focus {\n    color: #3f93b9;\n    text-decoration: underline;\n  }\n`;\n\nconst Name = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n  text-align: center;\n  @media screen and (min-width: 320px) {\n    width: 150px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 200px;\n  }\n`;\n\nexport { List, Item, Image, StyledLink, Name };\n","import { useLocation } from 'react-router-dom';\nimport { List, Item, Image, StyledLink, Name } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(({ id, poster_path, title }) => (\n        <Item key={id}>\n          <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n            <Image\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : 'https://yt3.ggpht.com/AAKF_677TIvjFz_9xFF0R6PgiVd0kRpEtY6APSxSDRP65nXg8hkn9NFsz2bRd9_Z37DJ9D_b=s900-c-k-c0x00ffffff-no-rj'\n              }\n              alt={title}\n              width=\"100\"\n              height=\"160\"\n              loading=\"lazy\"\n            />\n\n            <Name>{title}</Name>\n          </StyledLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  padding: 30px 0;\n`;\n\nexport { Section };\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport default class NotifyMessages {\n  onFetchError() {\n    return Notify.failure(\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n  }\n\n  onNullSearchQuery() {\n    return Notify.info(\n      \"We're sorry, but you should enter some name in the search box.\"\n    );\n  }\n\n  onTotalImages(total) {\n    return Notify.success(`Hooray! We found ${total} images.`);\n  }\n}","import styled from 'styled-components';\n\nconst SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  margin: 20px auto 40px;\n  width: 100%;\n  max-width: 300px;\n  background-color: transparent;\n\n  @media screen and (min-width: 768px) {\n    max-width: 400px;\n  }\n`;\n\nconst SearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  width: 200px;\n  padding: 6px 10px;\n\n  font: inherit;\n  font-size: 14px;\n  line-height: 1.33;\n  outline: none;\n\n  border: none;\n  border-radius: 4px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n  ::placeholder {\n    font: inherit;\n    font-size: 16px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 300px;\n    font-size: 16px;\n  }\n\n  :hover,\n  :focus {\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2) inset,\n      0px 2px 2px 0px rgba(0, 0, 0, 0.14) inset,\n      0px 1px 5px 0px rgba(0, 0, 0, 0.12) inset;\n  }\n`;\n\nconst SearchBtn = styled.button`\n  display: inline-block;\n  text-align: center;\n  width: 70px;\n  padding: 6px;\n\n  font-family: inherit;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 1.33;\n\n  color: rgba(42, 42, 42, 0.5);\n  background-color: rgba(42, 42, 42, 0.1);\n\n  text-decoration: none;\n  border: 0;\n  border-radius: 4px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    max-width: 100px;\n    font-size: 16px;\n  }\n\n  :hover,\n  :focus {\n    color: #fff;\n    background-color: rgba(63, 146, 185, 0.8);\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2) inset,\n      0px 2px 2px 0px rgba(0, 0, 0, 0.14) inset,\n      0px 1px 5px 0px rgba(0, 0, 0, 0.12) inset;\n  }\n`;\n\nexport { SearchForm, SearchInput, SearchBtn };\n","import { useState } from 'react';\nimport NotifyMessages from '../../helpers/Messages/NotifyMessages';\nimport { SearchForm, SearchInput, SearchBtn } from './Searchbar.styled';\n\nconst notify = new NotifyMessages();\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleChange = e => {\n    setSearchQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (searchQuery.trim() === '') {\n      return notify.onNullSearchQuery();\n    }\n\n    onSubmit(searchQuery);\n    reset();\n  };\n\n  const reset = () => {\n    setSearchQuery('');\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <SearchInput\n        type=\"text\"\n        value={searchQuery}\n        onChange={handleChange}\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Enter your movie\"\n      />\n      <SearchBtn type=\"submit\">Search</SearchBtn>\n    </SearchForm>\n  );\n};\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nexport default class NotiflixLoading {\n  onLoading() {\n    return Loading.circle('Loading...', {\n      backgroundColor: 'rgba(0,0,0,0.5)',\n      svgSize: '160px',\n      svgColor: '#0f5271',\n      messageFontSize: '20px',\n    });\n  }\n\n  onLoaded() {\n    return Loading.remove();\n  }\n}\n","import styled from 'styled-components';\nimport { Section } from 'components/base/Section.styled';\nimport { Container } from 'components/base/Container.styled';\n\nconst MoviesContainer = styled(Container)`\n  margin: 0 auto;\n`;\n\nconst MoviesSection = styled(Section)`\n  gap: 30px;\n`;\n\nconst Title = styled.h1`\n  font-size: 36px;\n  font-weight: 500;\n  color: rgb(0, 0, 0);\n`;\n\nexport { MoviesContainer, MoviesSection, Title };\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchData } from 'services/APIservice';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport NotiflixLoading from '../../helpers/Loader/NotiflixLoading';\nimport NotifyMessages from '../../helpers/Messages/NotifyMessages';\n\nimport { MoviesContainer, MoviesSection, Title } from './Movies.styled';\n\nconst notify = new NotifyMessages();\nconst loader = new NotiflixLoading();\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n  const pathParams = `search/movie?query=${searchQuery}`;\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (searchQuery === '') return;\n\n    async function getData() {\n      setIsLoading(true);\n      try {\n        const { data } = await fetchData(pathParams);\n\n        setMovies(data.results);\n\n        if (data.total_results === 0) {\n          return notify.onFetchError();\n        }\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getData();\n  }, [pathParams, searchQuery]);\n\n  const handleFormSubmit = searchQuery => {\n    reset();\n    updateQueryString(searchQuery);\n  };\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  const reset = () => {\n    setSearchParams('');\n    setError(null);\n    setIsLoading(false);\n  };\n\n  return (\n    <main>\n      <MoviesContainer>\n        <MoviesSection>\n          <Searchbar onSubmit={handleFormSubmit} />\n          {isLoading ? loader.onLoading() : loader.onLoaded()}\n          {movies.length !== 0 && !error && <MoviesList movies={movies} />}\n          {error && <Title> Whoops, something went wrong</Title>}\n        </MoviesSection>\n      </MoviesContainer>\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6d6a84090fff66fc1fd25eac643a37be';\n\n// const pathParams = [\n//   { trend: 'trending/movie/day' },\n//   { search: 'search/movie' },\n//   { movieDetails: `movie/${movieId}` },\n//   { cast: `movie/${movieId}/credits` },\n//   { reviews: `movie/${movieId}/reviews` },\n// ];\n\nasync function fetchData(pathParams) {\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nasync function fetchDataByID(id, path) {\n  const pathURL = path ? `/${path}` : '';\n  const pathParams = `movie/${id}${pathURL}`;\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nfetchData.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n};\n\nfetchDataByID.propTypes = {\n  id: PropTypes.string.isRequired,\n  path: PropTypes.string,\n};\n\nexport { fetchData, fetchDataByID };\n"],"names":["List","styled","Item","Image","StyledLink","Link","Name","MoviesList","movies","location","useLocation","map","id","poster_path","title","to","state","from","src","alt","width","height","loading","Section","NotifyMessages","Notify","total","SearchForm","SearchInput","SearchBtn","notify","Searchbar","onSubmit","useState","searchQuery","setSearchQuery","reset","e","preventDefault","trim","onNullSearchQuery","type","value","onChange","target","toLowerCase","autoComplete","autoFocus","placeholder","NotiflixLoading","Loading","backgroundColor","svgSize","svgColor","messageFontSize","MoviesContainer","Container","MoviesSection","Title","loader","useSearchParams","searchParams","setSearchParams","get","pathParams","setMovies","isLoading","setIsLoading","error","setError","useEffect","fetchData","data","results","total_results","onFetchError","getData","updateQueryString","query","onLoading","onLoaded","length","BASE_URL","API_KEY","axiosInstance","axios","baseURL","headers","params","api_key","fetchDataByID","path","pathURL","propTypes","PropTypes"],"sourceRoot":""}