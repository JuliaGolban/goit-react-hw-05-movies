{"version":3,"file":"static/js/387.90b66ebf.chunk.js","mappings":"kRAEMA,EAAOC,EAAAA,GAAAA,GAAS,whBAwBhBC,EAAOD,EAAAA,GAAAA,GAAS,2dAsBhBE,EAAQF,EAAAA,GAAAA,IAAU,qRAgBlBG,EAAcH,EAAAA,GAAAA,IAAU,6TAiBxBI,EAAOJ,EAAAA,GAAAA,EAAQ,iEAKfK,EAAUL,EAAAA,GAAAA,EAAQ,iE,SCrBxB,EA3Da,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,UAAS,MAAK,eAAjCG,EAAK,KAAEC,EAAQ,KActB,IAZAC,EAAAA,EAAAA,YAAU,WACc,aAOrB,OAPqB,0BAAtB,qHAE2BC,EAAAA,EAAAA,GAAcR,EAAS,WAAW,KAAD,WAAhDS,EAAI,EAAJA,KACRL,EAAQK,EAAKN,MAAM,gDAEnBG,EAAS,EAAD,IAAQ,0DAEnB,uBARc,WACO,wBAQtBI,EACF,GAAG,CAACV,KAECG,EACH,OAAO,KAKT,OACE,UAACV,EAAI,WACc,IAAhBU,EAAKQ,QAAgBN,IAAS,+DAC9BF,EAAKS,KAAI,gBAAGC,EAAE,EAAFA,GAAIC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAAY,OAC5C,UAACrB,EAAI,YACH,SAACC,EAAK,CACJqB,IACED,EAAY,yCAC0BA,GAClC,CAAEE,WAVhB,sKAYQC,IAAKL,EACLM,MAAM,MACNC,OAAO,SAET,UAACxB,EAAW,YACV,SAACC,EAAI,UAAEgB,KACP,UAACf,EAAO,yBAAagB,UAbdF,EAeJ,MAlBAb,EAsBf,C,mICjDMsB,EAAW,gCACXC,EAAU,mCAQhB,SAEeC,EAAU,GAAD,4CAUvB,OAVuB,0BAAxB,WAAyBC,GAAU,4EAO/B,OANIC,EAAgBC,EAAAA,GAAAA,OAAa,CACjCC,QAAQ,GAAD,OAAKN,GAAQ,OAAGG,GACvBI,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,CACNC,QAASR,KAEV,EAAD,OAEWG,EAAcM,MAAM,KAAD,+EACjC,+BAEcxB,EAAc,EAAD,+CAY3B,OAZ2B,0BAA5B,WAA6BK,EAAIoB,GAAI,gFASjC,OARIC,EAAUD,EAAI,WAAOA,GAAS,GAC9BR,EAAU,gBAAYZ,GAAE,OAAGqB,GAC3BR,EAAgBC,EAAAA,GAAAA,OAAa,CACjCC,QAAQ,GAAD,OAAKN,GAAQ,OAAGG,GACvBI,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,CACNC,QAASR,KAEV,EAAD,OAEWG,EAAcM,MAAM,KAAD,+EACjC,sBAEDR,EAAUW,UAAY,CACpBV,WAAYW,IAAAA,OAAAA,YAGd5B,EAAc2B,UAAY,CACxBtB,GAAIuB,IAAAA,OAAAA,WACJH,KAAMG,IAAAA,O","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/APIservice.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: stretch;\n  gap: 15px;\n\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 768px) {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-auto-rows: auto;\n    grid-gap: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));\n    grid-auto-rows: auto;\n    grid-gap: 32px 16px;\n  }\n`;\n\nconst Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  padding: 10px;\n  width: 100%;\n  height: auto;\n  border: 3px solid rgba(132, 132, 132, 0.5);\n  border-radius: 4px;\n  box-shadow: 0px 7px 10px -2px rgba(132, 132, 132, 0.5);\n\n  @media screen and (min-width: 320px) {\n    max-width: 180px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 200px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 230px;\n  }\n`;\n\nconst Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n\n  @media screen and (min-width: 320px) {\n    width: 150px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 200px;\n  }\n`;\n\nconst TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-width: 100px;\n\n  @media screen and (min-width: 320px) {\n    max-width: 150px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 200px;\n  }\n`;\n\nconst Name = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst Content = styled.p`\n  font-size: 12px;\n  font-weight: 400;\n`;\n\nexport { List, Item, Image, TextWrapper, Name, Content };\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchDataByID } from 'services/APIservice';\nimport { List, Item, Image, TextWrapper, Name, Content } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const { data } = await fetchDataByID(movieId, 'credits');\n        setCast(data.cast);\n      } catch (error) {\n        setError(error);\n      }\n    }\n    getData();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  const imgDefault =\n    'https://pixabay.com/get/g8c1138565a78b547fa71678d08f599cbaad4f3a19cb4a9df05343dd74a430e66f1d6e0dcd85e02eaf38e9fe1eea19105cf39824c34461c1b1500882c40d32d2d_1280.jpg';\n  return (\n    <List key={movieId}>\n      {cast.length !== 0 && error && <p>We don't have a cast for this movie</p>}\n      {cast.map(({ id, name, character, profile_path }) => (\n        <Item key={id}>\n          <Image\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : { imgDefault }\n            }\n            alt={name}\n            width=\"100\"\n            height=\"160\"\n          />\n          <TextWrapper>\n            <Name>{name}</Name>\n            <Content>Character: {character}</Content>\n          </TextWrapper>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nCast.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      character: PropTypes.string,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6d6a84090fff66fc1fd25eac643a37be';\n\n// const pathParams = [\n//   { trend: 'trending/movie/day' },\n//   { search: 'search/movie' },\n//   { movieDetails: `movie/${movieId}` },\n//   { cast: `movie/${movieId}/credits` },\n//   { reviews: `movie/${movieId}/reviews` },\n// ];\n\nasync function fetchData(pathParams) {\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nasync function fetchDataByID(id, path) {\n  const pathURL = path ? `/${path}` : '';\n  const pathParams = `movie/${id}${pathURL}`;\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nfetchData.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n};\n\nfetchDataByID.propTypes = {\n  id: PropTypes.string.isRequired,\n  path: PropTypes.string,\n};\n\nexport { fetchData, fetchDataByID };\n"],"names":["List","styled","Item","Image","TextWrapper","Name","Content","movieId","useParams","useState","cast","setCast","error","setError","useEffect","fetchDataByID","data","getData","length","map","id","name","character","profile_path","src","imgDefault","alt","width","height","BASE_URL","API_KEY","fetchData","pathParams","axiosInstance","axios","baseURL","headers","params","api_key","get","path","pathURL","propTypes","PropTypes"],"sourceRoot":""}