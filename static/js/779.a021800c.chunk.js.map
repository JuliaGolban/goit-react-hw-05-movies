{"version":3,"file":"static/js/779.a021800c.chunk.js","mappings":"8QAEMA,EAAOC,EAAAA,GAAAA,GAAS,2eAwBhBC,EAAOD,EAAAA,GAAAA,GAAS,qOAUhBE,EAAOF,EAAAA,GAAAA,EAAQ,iEAKfG,EAAUH,EAAAA,GAAAA,EAAQ,oZ,SCWxB,EA9CgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,KAC1B,GAA0BF,EAAAA,EAAAA,UAAS,MAAK,eAAjCG,EAAK,KAAEC,EAAQ,KActB,OAZAC,EAAAA,EAAAA,YAAU,WACc,aAOrB,OAPqB,0BAAtB,qHAE2BC,EAAAA,EAAAA,GAAcR,EAAS,WAAW,KAAD,WAAhDS,EAAI,EAAJA,KACRL,EAAWK,EAAKC,SAAS,gDAEzBJ,EAAS,EAAD,IAAQ,0DAEnB,uBARc,WACO,wBAQtBK,EACF,GAAG,CAACX,IAECG,GAKH,UAACR,EAAI,WACiB,IAAnBQ,EAAQS,QAAgBP,IACvB,oEAEDF,EAAQU,KAAI,gBAAGC,EAAE,EAAFA,GAAIC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAO,OACjC,UAACnB,EAAI,YACH,UAACC,EAAI,sBAAUiB,MACf,SAAChB,EAAO,UAAEiB,MAFDF,EAGJ,MARAd,GAJJ,IAgBX,C,mICrCMiB,EAAW,gCACXC,EAAU,mCAQhB,SAEeC,EAAU,GAAD,4CAUvB,OAVuB,0BAAxB,WAAyBC,GAAU,4EAO/B,OANIC,EAAgBC,EAAAA,GAAAA,OAAa,CACjCC,QAAQ,GAAD,OAAKN,GAAQ,OAAGG,GACvBI,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,CACNC,QAASR,KAEV,EAAD,OAEWG,EAAcM,MAAM,KAAD,+EACjC,+BAEcnB,EAAc,EAAD,+CAY3B,OAZ2B,0BAA5B,WAA6BM,EAAIc,GAAI,gFASjC,OARIC,EAAUD,EAAI,WAAOA,GAAS,GAC9BR,EAAU,gBAAYN,GAAE,OAAGe,GAC3BR,EAAgBC,EAAAA,GAAAA,OAAa,CACjCC,QAAQ,GAAD,OAAKN,GAAQ,OAAGG,GACvBI,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,CACNC,QAASR,KAEV,EAAD,OAEWG,EAAcM,MAAM,KAAD,+EACjC,sBAEDR,EAAUW,UAAY,CACpBV,WAAYW,IAAAA,OAAAA,YAGdvB,EAAcsB,UAAY,CACxBhB,GAAIiB,IAAAA,OAAAA,WACJH,KAAMG,IAAAA,O","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/APIservice.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: stretch;\n  gap: 15px;\n\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 768px) {\n    display: grid;\n    grid-auto-rows: 260px;\n    grid-gap: 15px;\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    grid-auto-rows: auto;\n    grid-gap: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    grid-gap: 32px 16px;\n  }\n`;\n\nconst Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  padding: 10px;\n  border: 3px solid rgba(132, 132, 132, 0.5);\n  border-radius: 4px;\n  box-shadow: 0px 7px 10px -2px rgba(132, 132, 132, 0.5);\n`;\n\nconst Name = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst Content = styled.p`\n  font-size: 12px;\n  font-weight: 400;\n  font-style: italic;\n  width: 240px;\n  max-height: 100px;\n  overflow-y: scroll;\n\n  @media screen and (min-width: 320px) {\n    width: 260px;\n    max-height: 120px;\n    overflow-y: scroll;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 300px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 360px;\n  }\n`;\n\nexport { List, Item, Name, Content };\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchDataByID } from 'services/APIservice';\nimport { List, Item, Name, Content } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const { data } = await fetchDataByID(movieId, 'reviews');\n        setReviews(data.results);\n      } catch (error) {\n        setError(error);\n      }\n    }\n    getData();\n  }, [movieId]);\n\n  if (!reviews) {\n    return null;\n  }\n\n  return (\n    <List key={movieId}>\n      {reviews.length === 0 && error && (\n        <p>We don't have any reviews for this movie</p>\n      )}\n      {reviews.map(({ id, author, content }) => (\n        <Item key={id}>\n          <Name>Author: {author}</Name>\n          <Content>{content}</Content>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nReviews.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6d6a84090fff66fc1fd25eac643a37be';\n\n// const pathParams = [\n//   { trend: 'trending/movie/day' },\n//   { search: 'search/movie' },\n//   { movieDetails: `movie/${movieId}` },\n//   { cast: `movie/${movieId}/credits` },\n//   { reviews: `movie/${movieId}/reviews` },\n// ];\n\nasync function fetchData(pathParams) {\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nasync function fetchDataByID(id, path) {\n  const pathURL = path ? `/${path}` : '';\n  const pathParams = `movie/${id}${pathURL}`;\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nfetchData.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n};\n\nfetchDataByID.propTypes = {\n  id: PropTypes.string.isRequired,\n  path: PropTypes.string,\n};\n\nexport { fetchData, fetchDataByID };\n"],"names":["List","styled","Item","Name","Content","movieId","useParams","useState","reviews","setReviews","error","setError","useEffect","fetchDataByID","data","results","getData","length","map","id","author","content","BASE_URL","API_KEY","fetchData","pathParams","axiosInstance","axios","baseURL","headers","params","api_key","get","path","pathURL","propTypes","PropTypes"],"sourceRoot":""}